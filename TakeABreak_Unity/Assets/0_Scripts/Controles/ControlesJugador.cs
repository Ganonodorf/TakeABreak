//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controles/ControlesJugador.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlesJugador: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlesJugador()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlesJugador"",
    ""maps"": [
        {
            ""name"": ""Andando"",
            ""id"": ""eab7c0c6-20f7-4a12-85a3-4418ed3f181a"",
            ""actions"": [
                {
                    ""name"": ""Derecha"",
                    ""type"": ""Button"",
                    ""id"": ""7ad08ffb-6349-4846-a25e-6034f42d7768"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Izquierda"",
                    ""type"": ""Button"",
                    ""id"": ""8ad8ee38-f79c-48dd-9fab-7921cb53c599"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Accion"",
                    ""type"": ""Button"",
                    ""id"": ""d149581b-c7dd-4bb3-9159-2e1dca6623c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3567832d-3a9d-4789-880d-42545b3128ac"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Derecha"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d839a0a-647c-4c11-9d11-e7afb7123665"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Derecha"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee5398b0-38cb-4359-a5b7-90971cad3fd9"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Derecha"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5630e04-cd07-4dad-9e4e-472441d7094a"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Derecha"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7914ff49-3090-4c1d-ba7c-1054ffa703ef"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Izquierda"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efe1dbc6-cab8-40cd-ab7f-562d56cc7769"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Izquierda"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""633ada58-a996-40ba-9bb0-e67b03a5b7ee"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Izquierda"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b43aa3e-571f-4922-b027-580523c8bf43"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Izquierda"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af341879-50c2-4350-950f-82ad06fc973b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fcc76a9-b250-435c-8add-81d380adabec"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Conversando"",
            ""id"": ""b3abf97a-c005-441d-a144-d777fb9c268b"",
            ""actions"": [
                {
                    ""name"": ""Continuar"",
                    ""type"": ""Button"",
                    ""id"": ""31aa6852-a504-4229-b002-b7dfbb548ac1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arriba"",
                    ""type"": ""Button"",
                    ""id"": ""e01135ae-3da4-4862-a67c-3c1a3b94bc40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Abajo"",
                    ""type"": ""Button"",
                    ""id"": ""5a189cdb-f635-4b12-8015-39dae4c954fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c724b4b-4d5d-4647-b5f9-750ec601bb1c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continuar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbdbacac-cf8f-43b1-ad85-5d0ba4b8d8c2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continuar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4d86481-502e-4b23-87f2-d72d8f2706cf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arriba"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5405740c-bb8f-4c95-984c-84bb2587450e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arriba"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63226dcf-0e7c-446f-b3f3-6755466770bc"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arriba"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f5b09f2-350a-486c-9d37-3d4055eaceef"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arriba"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e04c2ec8-7332-466a-81d5-66ecbac00640"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Abajo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86839f1b-5d70-4745-8ca4-8cd41786dcd5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Abajo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f54ca5d3-a354-4048-b631-856186069f41"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Abajo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8df4adb3-0268-4188-99f2-adf16694ec40"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Abajo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Meditando"",
            ""id"": ""f497169e-2805-45f8-99c9-00b676160297"",
            ""actions"": [
                {
                    ""name"": ""Respirar"",
                    ""type"": ""Button"",
                    ""id"": ""35dc5f93-43fb-4c55-8233-6478e52f93cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Salir"",
                    ""type"": ""Button"",
                    ""id"": ""c33f4df4-3d5d-41ae-bc11-553798e06ca5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""758ea99b-d895-4d19-8adb-e59bc402424a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Salir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""565958ab-98c8-49a1-8b90-16c9c843e11e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Respirar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0360cbde-95c9-432e-8552-fc227a1ef3d0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Respirar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inicio"",
            ""id"": ""927783ee-d4e6-4ae4-9d75-ecf4ae662a8d"",
            ""actions"": [
                {
                    ""name"": ""Accion"",
                    ""type"": ""Button"",
                    ""id"": ""d2887918-4201-4c84-9246-26e7eb6bb8ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17d9e0c6-22b6-4ec3-a2f4-6451c2f90fec"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78a8b46d-003a-4e18-a7db-86b430585c0f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Andando
        m_Andando = asset.FindActionMap("Andando", throwIfNotFound: true);
        m_Andando_Derecha = m_Andando.FindAction("Derecha", throwIfNotFound: true);
        m_Andando_Izquierda = m_Andando.FindAction("Izquierda", throwIfNotFound: true);
        m_Andando_Accion = m_Andando.FindAction("Accion", throwIfNotFound: true);
        // Conversando
        m_Conversando = asset.FindActionMap("Conversando", throwIfNotFound: true);
        m_Conversando_Continuar = m_Conversando.FindAction("Continuar", throwIfNotFound: true);
        m_Conversando_Arriba = m_Conversando.FindAction("Arriba", throwIfNotFound: true);
        m_Conversando_Abajo = m_Conversando.FindAction("Abajo", throwIfNotFound: true);
        // Meditando
        m_Meditando = asset.FindActionMap("Meditando", throwIfNotFound: true);
        m_Meditando_Respirar = m_Meditando.FindAction("Respirar", throwIfNotFound: true);
        m_Meditando_Salir = m_Meditando.FindAction("Salir", throwIfNotFound: true);
        // Inicio
        m_Inicio = asset.FindActionMap("Inicio", throwIfNotFound: true);
        m_Inicio_Accion = m_Inicio.FindAction("Accion", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Andando
    private readonly InputActionMap m_Andando;
    private List<IAndandoActions> m_AndandoActionsCallbackInterfaces = new List<IAndandoActions>();
    private readonly InputAction m_Andando_Derecha;
    private readonly InputAction m_Andando_Izquierda;
    private readonly InputAction m_Andando_Accion;
    public struct AndandoActions
    {
        private @ControlesJugador m_Wrapper;
        public AndandoActions(@ControlesJugador wrapper) { m_Wrapper = wrapper; }
        public InputAction @Derecha => m_Wrapper.m_Andando_Derecha;
        public InputAction @Izquierda => m_Wrapper.m_Andando_Izquierda;
        public InputAction @Accion => m_Wrapper.m_Andando_Accion;
        public InputActionMap Get() { return m_Wrapper.m_Andando; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AndandoActions set) { return set.Get(); }
        public void AddCallbacks(IAndandoActions instance)
        {
            if (instance == null || m_Wrapper.m_AndandoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AndandoActionsCallbackInterfaces.Add(instance);
            @Derecha.started += instance.OnDerecha;
            @Derecha.performed += instance.OnDerecha;
            @Derecha.canceled += instance.OnDerecha;
            @Izquierda.started += instance.OnIzquierda;
            @Izquierda.performed += instance.OnIzquierda;
            @Izquierda.canceled += instance.OnIzquierda;
            @Accion.started += instance.OnAccion;
            @Accion.performed += instance.OnAccion;
            @Accion.canceled += instance.OnAccion;
        }

        private void UnregisterCallbacks(IAndandoActions instance)
        {
            @Derecha.started -= instance.OnDerecha;
            @Derecha.performed -= instance.OnDerecha;
            @Derecha.canceled -= instance.OnDerecha;
            @Izquierda.started -= instance.OnIzquierda;
            @Izquierda.performed -= instance.OnIzquierda;
            @Izquierda.canceled -= instance.OnIzquierda;
            @Accion.started -= instance.OnAccion;
            @Accion.performed -= instance.OnAccion;
            @Accion.canceled -= instance.OnAccion;
        }

        public void RemoveCallbacks(IAndandoActions instance)
        {
            if (m_Wrapper.m_AndandoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAndandoActions instance)
        {
            foreach (var item in m_Wrapper.m_AndandoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AndandoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AndandoActions @Andando => new AndandoActions(this);

    // Conversando
    private readonly InputActionMap m_Conversando;
    private List<IConversandoActions> m_ConversandoActionsCallbackInterfaces = new List<IConversandoActions>();
    private readonly InputAction m_Conversando_Continuar;
    private readonly InputAction m_Conversando_Arriba;
    private readonly InputAction m_Conversando_Abajo;
    public struct ConversandoActions
    {
        private @ControlesJugador m_Wrapper;
        public ConversandoActions(@ControlesJugador wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continuar => m_Wrapper.m_Conversando_Continuar;
        public InputAction @Arriba => m_Wrapper.m_Conversando_Arriba;
        public InputAction @Abajo => m_Wrapper.m_Conversando_Abajo;
        public InputActionMap Get() { return m_Wrapper.m_Conversando; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConversandoActions set) { return set.Get(); }
        public void AddCallbacks(IConversandoActions instance)
        {
            if (instance == null || m_Wrapper.m_ConversandoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ConversandoActionsCallbackInterfaces.Add(instance);
            @Continuar.started += instance.OnContinuar;
            @Continuar.performed += instance.OnContinuar;
            @Continuar.canceled += instance.OnContinuar;
            @Arriba.started += instance.OnArriba;
            @Arriba.performed += instance.OnArriba;
            @Arriba.canceled += instance.OnArriba;
            @Abajo.started += instance.OnAbajo;
            @Abajo.performed += instance.OnAbajo;
            @Abajo.canceled += instance.OnAbajo;
        }

        private void UnregisterCallbacks(IConversandoActions instance)
        {
            @Continuar.started -= instance.OnContinuar;
            @Continuar.performed -= instance.OnContinuar;
            @Continuar.canceled -= instance.OnContinuar;
            @Arriba.started -= instance.OnArriba;
            @Arriba.performed -= instance.OnArriba;
            @Arriba.canceled -= instance.OnArriba;
            @Abajo.started -= instance.OnAbajo;
            @Abajo.performed -= instance.OnAbajo;
            @Abajo.canceled -= instance.OnAbajo;
        }

        public void RemoveCallbacks(IConversandoActions instance)
        {
            if (m_Wrapper.m_ConversandoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IConversandoActions instance)
        {
            foreach (var item in m_Wrapper.m_ConversandoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ConversandoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ConversandoActions @Conversando => new ConversandoActions(this);

    // Meditando
    private readonly InputActionMap m_Meditando;
    private List<IMeditandoActions> m_MeditandoActionsCallbackInterfaces = new List<IMeditandoActions>();
    private readonly InputAction m_Meditando_Respirar;
    private readonly InputAction m_Meditando_Salir;
    public struct MeditandoActions
    {
        private @ControlesJugador m_Wrapper;
        public MeditandoActions(@ControlesJugador wrapper) { m_Wrapper = wrapper; }
        public InputAction @Respirar => m_Wrapper.m_Meditando_Respirar;
        public InputAction @Salir => m_Wrapper.m_Meditando_Salir;
        public InputActionMap Get() { return m_Wrapper.m_Meditando; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MeditandoActions set) { return set.Get(); }
        public void AddCallbacks(IMeditandoActions instance)
        {
            if (instance == null || m_Wrapper.m_MeditandoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MeditandoActionsCallbackInterfaces.Add(instance);
            @Respirar.started += instance.OnRespirar;
            @Respirar.performed += instance.OnRespirar;
            @Respirar.canceled += instance.OnRespirar;
            @Salir.started += instance.OnSalir;
            @Salir.performed += instance.OnSalir;
            @Salir.canceled += instance.OnSalir;
        }

        private void UnregisterCallbacks(IMeditandoActions instance)
        {
            @Respirar.started -= instance.OnRespirar;
            @Respirar.performed -= instance.OnRespirar;
            @Respirar.canceled -= instance.OnRespirar;
            @Salir.started -= instance.OnSalir;
            @Salir.performed -= instance.OnSalir;
            @Salir.canceled -= instance.OnSalir;
        }

        public void RemoveCallbacks(IMeditandoActions instance)
        {
            if (m_Wrapper.m_MeditandoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMeditandoActions instance)
        {
            foreach (var item in m_Wrapper.m_MeditandoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MeditandoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MeditandoActions @Meditando => new MeditandoActions(this);

    // Inicio
    private readonly InputActionMap m_Inicio;
    private List<IInicioActions> m_InicioActionsCallbackInterfaces = new List<IInicioActions>();
    private readonly InputAction m_Inicio_Accion;
    public struct InicioActions
    {
        private @ControlesJugador m_Wrapper;
        public InicioActions(@ControlesJugador wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accion => m_Wrapper.m_Inicio_Accion;
        public InputActionMap Get() { return m_Wrapper.m_Inicio; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InicioActions set) { return set.Get(); }
        public void AddCallbacks(IInicioActions instance)
        {
            if (instance == null || m_Wrapper.m_InicioActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InicioActionsCallbackInterfaces.Add(instance);
            @Accion.started += instance.OnAccion;
            @Accion.performed += instance.OnAccion;
            @Accion.canceled += instance.OnAccion;
        }

        private void UnregisterCallbacks(IInicioActions instance)
        {
            @Accion.started -= instance.OnAccion;
            @Accion.performed -= instance.OnAccion;
            @Accion.canceled -= instance.OnAccion;
        }

        public void RemoveCallbacks(IInicioActions instance)
        {
            if (m_Wrapper.m_InicioActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInicioActions instance)
        {
            foreach (var item in m_Wrapper.m_InicioActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InicioActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InicioActions @Inicio => new InicioActions(this);
    public interface IAndandoActions
    {
        void OnDerecha(InputAction.CallbackContext context);
        void OnIzquierda(InputAction.CallbackContext context);
        void OnAccion(InputAction.CallbackContext context);
    }
    public interface IConversandoActions
    {
        void OnContinuar(InputAction.CallbackContext context);
        void OnArriba(InputAction.CallbackContext context);
        void OnAbajo(InputAction.CallbackContext context);
    }
    public interface IMeditandoActions
    {
        void OnRespirar(InputAction.CallbackContext context);
        void OnSalir(InputAction.CallbackContext context);
    }
    public interface IInicioActions
    {
        void OnAccion(InputAction.CallbackContext context);
    }
}
